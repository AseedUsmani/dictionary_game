#!/usr/bin/env node

const request = require('request');
const readline_sync = require('readline-sync');
const shuffle = require('shuffle-words');

API_KEY = 'b972c7ca44dda72a5b482052b1f5e13470e01477f3fb97c85d5313b3c112627073481104fec2fb1a0cc9d84c2212474c0cbe7d8e59d7b95c7cb32a1133f778abd1857bf934ba06647fda4f59e878d164'
URL = 'https://fourtytwowords.herokuapp.com/'

PLAY_ENDPOINT = 'play'
RANDOM_ENDPOINT = 'words/randomWord'
DEFINITION_ENDPOINT = 'word/{word}/definitions'
RELATED_WORDS_ENDPOINT = 'word/{word}/relatedWords'
EXAMPLES_ENDPOINT = 'word/{word}/examples'
ANTONYM_ENDPOINT = 'ant'
SYNONYM_ENDPOINT = 'syn'

LINE = '__________________________________________________'



function getEndpoint(endpoint, word) {
	/*
	To populate word in the endpoint
	@param {endpoint}: Endpoint
	@param {word}: Word
	*/
	return endpoint.replace('{word}', word);
}


function parseSentences(data) {
	/*
	To extract all the sentences (it may be examples or definitions) by the API.
	@param {JSON} data: JSON data returned by the endpoint.
	@return {array} sentences: list of sentences
	*/
	var sentences = []
	data.forEach(function(sentence) {
		sentences = sentences.concat([sentence['text']]);
	}); 

	return sentences;
}


function parseDefinitions(data) {
	/*
	Print all the definitions returned by the API.
	@param {JSON} data: JSON data returned by the endpoint.
	*/
	console.log('Definitions: \n');
	var defns = parseSentences(data);
	defns.forEach(function(text) {
		console.log(text, '\n');
	});
}


function parseExamples(data) {
	/*
	Print all the examples returned by the API.
	@param {JSON} data: JSON data returned by the endpoint.
	*/
	console.log('Examples: \n')
	var exs = parseSentences(data['examples']);
	exs.forEach(function(text) {
		console.log(text, '\n');
	});
}


function parseWords(data, relationship) {
	/*
	To extract all the words returned by the API of the given relationship.
	@param {JSON} data: JSON data returned by the endpoint.
	@return {array} words: List of words of the given relationship.
	*/
	var words = []
	data.forEach(function(obj) {
		if(obj['relationshipType'] == relationship) {
			words = words.concat(obj['words']);
		}
	});
	return words
}



function parseSynonyms(data) {
	/*
	To print all the synonyms returned by the API
	@param {JSON} data: JSON data returned by the endpoint.
	*/
	var synonyms = parseWords(data, 'synonym');

	if(synonyms.length > 0) {
		console.log('Synonyms: ', synonyms.join(', '));
	} else console.log('No synonyms found.')
}


function parseAntonyms(data) {
	/*
	To print all the antonyms returned by the API
	@param {JSON} data: JSON data returned by the endpoint.
	*/
	var antonyms = parseWords(data, 'antonym')

	if(antonyms.length > 0) {
		console.log('Antonyms: ', antonyms.join(', '));
	} else console.log('No antonyms found.')
}


function parseRandom(data) {
	/*
	To continue to app when no args where passed, hence random word is chosen.
	@param {JSON} data: JSON data returned by the endpoint.
	*/
	var word = data['word'];

	console.log('Word: ', word);
	console.log(LINE);

	// Show definition
	request.get(URL + getEndpoint(DEFINITION_ENDPOINT, word) + '?api_key=' + API_KEY , function(request, response) {
		parseDefinitions(JSON.parse(response.body));
		console.log(LINE);
	});

	// Show synonyms and antonyms
	request.get(URL + getEndpoint(RELATED_WORDS_ENDPOINT, word) + '?api_key=' + API_KEY , function(request, response) {
		parseAntonyms(JSON.parse(response.body));
		console.log(LINE);
		parseSynonyms(JSON.parse(response.body));
		console.log(LINE);
	});

	// Show examples
	request.get(URL + getEndpoint(EXAMPLES_ENDPOINT, word) + '?api_key=' + API_KEY , function(request, response) {
		parseExamples(JSON.parse(response.body));
		console.log(LINE);
	});
}


function startGame(word, synonyms, antonyms, definitions) {
	/*
	To start the game
	@param {String} word: Random word that got chosen by the API.
	@param {array} synonyms: All the synonyms of the random word.
	@param {array} antonym: All the antonyms of the random word.
	@param {array} definitions: All the deinitions of the random word.
	*/
	console.log('Game On!');
	console.log('\nDefinition: ', definitions.pop() || 'No definition found');
	console.log('Synonyms: ', synonyms.pop() || 'No synonyms found');
	console.log('Antonym:', antonyms.pop() || 'No antonyms found.');
	console.log('\n');

	while(true) {
		var answer = readline_sync.question('Enter your answer: ');
		if(answer == word || synonyms.includes(answer)) {
			console.log('Correct answer');
			break;
		} else {
			console.log('\nIncorrect answer; please choose an option to continue...');
			console.log('1: Try again.');
			console.log('2: Take a hint.');
			console.log('3: Quit.');
			var option = readline_sync.question('Choose an option: ');

			if(option == '1') {
				continue;
			} else if(option == '2') {
				console.log('\nDefinition: ', definitions.pop() || 'No definition found');
				console.log('Synonyms: ', synonyms.pop() || 'No synonyms found');
				console.log('Antonym: ', antonyms.pop() || 'No antonyms found.');
				console.log('Jumbled: ', shuffle(word, true));
			} else if(option == '3') {
				break;
			}
		}
	}
}


function parsePlay(data) {
	/*
	To continue to app when selected option was 'play'
	@param {JSON} data: JSON data returned by the endpoint.
	*/
	var word = data['word'];
	var synonyms = [];
	var antonyms = [];
	var definitions = [];

	var state = 0; // to check if we have got 

	// Show definition
	request.get(URL + getEndpoint(DEFINITION_ENDPOINT, word) + '?api_key=' + API_KEY , function(request, response) {
		definitions =parseSentences(JSON.parse(response.body));
		state++;
		if(state == 2) startGame(word, synonyms, antonyms, examples, definitions);
	});

	// Show synonyms and antonyms
	request.get(URL + getEndpoint(RELATED_WORDS_ENDPOINT, word) + '?api_key=' + API_KEY , function(request, response) {
		antonyms = parseWords(JSON.parse(response.body), 'antonym');
		synonyms = parseWords(JSON.parse(response.body), 'synonym');
		state++;
		if(state == 2) startGame(word, synonyms, antonyms, examples, definitions);
	});
}


function parseOutput(data, endpoint) {
	/*
	Control function for the output after getting data from a request
	@param {JSON} data: JSON data returned by the endpoint.
	@param {String} endpoint: Endpoint used to send request.
	*/
	switch(endpoint) {
		case RANDOM_ENDPOINT: parseRandom(data); break;
		case EXAMPLES_ENDPOINT: parseExamples(data); break;
		case DEFINITION_ENDPOINT: parseDefinitions(data); break;
		case ANTONYM_ENDPOINT: parseAntonyms(data); break;
		case SYNONYM_ENDPOINT: parseSynonyms(data); break;
		case PLAY_ENDPOINT: parsePlay(data); break;
	}
}


function sendReq(endpoint, word) {
	/*
	Prepare and send a get request to the URL
	@param {String} endpoint: Endpoint to send get request to.
	@param {Word} word: Word to add as URL param
	*/
	ept = endpoint;
	if(ept == SYNONYM_ENDPOINT || ept == ANTONYM_ENDPOINT) ept = RELATED_WORDS_ENDPOINT;
	else if(ept == PLAY_ENDPOINT) ept = RANDOM_ENDPOINT;

	var url = URL + ept + '?api_key=' + API_KEY;
	if(word != null) {
		url = getEndpoint(url, word);
	}

	request.get(url, function(request, response) {
		parseOutput(JSON.parse(response.body), endpoint)
	});
}

// Code starts working from here
var args = process.argv.slice(2);
switch(args[0]) {
	case undefined:
		sendReq(RANDOM_ENDPOINT, null);
		break;
	case 'syn':
		sendReq(SYNONYM_ENDPOINT, args[1]);
		break
	case 'ant':
		sendReq(ANTONYM_ENDPOINT, args[1]);
		break;
	case 'defn':
		sendReq(DEFINITION_ENDPOINT, args[1]);
		break;
	case 'ex':
		sendReq(EXAMPLES_ENDPOINT, args[1]);
		break;
	case 'play':
		sendReq(PLAY_ENDPOINT, null)
		break;
	default:
		console.log("Invalid argument.");
		break;
}
